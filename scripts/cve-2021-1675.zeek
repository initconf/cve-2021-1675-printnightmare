module CVE_2021_1675;


## As per the pcap and logs provided here
## https://github.com/LaresLLC/CVE-2021-1675/blob/main/zeek/dce_rpc.log
## looks like exploit uses the following:
## named_pipe : \\pipe\\spoolss
## endpoint   : spoolss
## operation  :  RpcEnumPrinterDrivers OR RpcAddPrinterDriverEx 

export {

    redef enum Notice::Type += {
        Match,
        Potential,
      };

      redef Config::config_files += { "/YURT/feeds/zeek-config/CVE_2021_1675" };

      option suspicious_endpoints: set[string] = {"spoolss", };
      option suspicious_pipe: set[string] =   {"\\pipe\\spoolss", };
      option suspicious_operations: set[string] =   {"RpcEnumPrinterDrivers", "RpcAddPrinterDriverEx"};

      option  ignore_fp: set[string] = {"FALSE_",}; 
      option ignore_operations: set[string] = { "RpcEnumJobs",}; 

}

hook Notice::policy (n: Notice::Info)
{
   if ( n$note == CVE_2021_1675::Match)
        { add n$actions[Notice::ACTION_EMAIL];}
   if ( n$note == CVE_2021_1675::Potential)
        { add n$actions[Notice::ACTION_LOG];}
}

# log_policy: [ts=1625227918.000581, uid=CXxnAW3gwntmlADdSc, id=[orig_h=192.168.1.149, orig_p=50070/tcp, resp_h=192.168.1.157, resp_p=445/tcp], rtt=830.888748 usecs, named_pipe=\pipe\spoolss, endpoint=spoolss, operation=RpcAddPrinterDriverEx]

hook DCE_RPC::log_policy(rec: DCE_RPC::Info, id: Log::ID, filter: Log::Filter)
  {

      if (rec$operation in ignore_operations)
          return; 

      if (rec$endpoint in suspicious_endpoints && rec$named_pipe in suspicious_pipe && rec$operation in suspicious_operations)
        {
          local _msg = fmt ("CVE-2021-1675 Matches on %s %s %s", rec$named_pipe, rec$endpoint, rec$operation) ;
          NOTICE([$note=CVE_2021_1675::Match, $id=rec$id, $msg=_msg, $identifier=cat(_msg), $suppress_for=1 mins]);
        }

  }



event DCE_RPC::dce_rpc(rec: DCE_RPC::Info)
  {
  #print fmt ("dce_rpc: %s", rec);
  }

event dce_rpc_bind(c: connection, fid: count, ctx_id: count, uuid: string, ver_major: count, ver_minor: count) &priority=5
  {
    #print fmt ("dce_rpc_bind");
  }

event dce_rpc_alter_context(c: connection, fid: count, ctx_id: count, uuid: string, ver_major: count, ver_minor: count) &priority=5
  {
  #print fmt ("dce_rpc_alter_context");
  }

event dce_rpc_bind_ack(c: connection, fid: count, sec_addr: string) &priority=5
  {
  #print fmt ("dce_rpc_bind_ack");
  }

event dce_rpc_alter_context_resp(c: connection, fid: count) &priority=5
  {
  #print fmt ("dce_rpc_alter_context_resp");
  }
event dce_rpc_request(c: connection, fid: count, ctx_id: count, opnum: count, stub_len: count) &priority=5
  {
  #print fmt ("dce_rpc_request");
  }
event dce_rpc_response(c: connection, fid: count, ctx_id: count, opnum: count, stub_len: count) &priority=5
  {
  #print fmt ("dce_rpc_response");
  }
